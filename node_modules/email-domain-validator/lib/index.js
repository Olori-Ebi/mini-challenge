"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dns_1 = require("dns");
const Joi = require("joi");
/**
 * To verify whether it is a valid email or not
 * @param email Email id
 */
function validateEmail(email) {
    const schema = Joi.string().email();
    const result = Joi.validate(email, schema);
    return result;
}
exports.validateEmail = validateEmail;
/**
 * To retrive the domain name from the valdiated email
 * @param email Email id
 */
function getEmailDomain(email) {
    const data = validateEmail(email);
    if (data && data.error)
        return data;
    data.host = email.split("@")[1];
    return data;
}
exports.getEmailDomain = getEmailDomain;
/**
 * To validate the email host using DNS resolve MX
 * @param email Email id
 */
function validate(email = "") {
    return new Promise((resolve, reject) => {
        let emailList = email.split(",");
        let promiseList = [];
        for (let email of emailList) {
            promiseList.push(validateMailExchange(email.trim()));
        }
        Promise.all(promiseList)
            .then((response) => {
            const domainValidatorResponse = parseMXResponse(response);
            return resolve(domainValidatorResponse);
        })
            .catch((e) => {
            return reject(e);
        });
    });
}
exports.validate = validate;
/**
 * Parse dns respose
 */
function parseMXResponse(mxResponse) {
    let data = {
        isValidDomain: true,
        erorrMessage: [],
        invalidEmailList: []
    };
    for (let r of mxResponse) {
        if (r instanceof Error) {
            const mxErrorResponse = JSON.parse(r.message);
            data.isValidDomain = false;
            data.invalidEmailList.push(mxErrorResponse.emailId);
            data.erorrMessage.push(mxErrorResponse.message);
        }
    }
    return data;
}
/**
 * Promise to validate mail exchange
 * @param email
 */
function validateMailExchange(emailId) {
    return new Promise((resolve, reject) => {
        let errorObj = {
            emailId,
            message: ""
        };
        //Domain validation
        const emailInfo = getEmailDomain(emailId);
        if (emailInfo && emailInfo.error) {
            if (emailInfo.error.message) {
                errorObj.message = `${emailInfo.error.message.replace('value', emailId)}`;
            }
            else {
                errorObj.message = `${emailId} " - " ${emailInfo.error.message}`;
            }
            const message = JSON.stringify(errorObj);
            return resolve(new Error(message));
        }
        //Validate Mail Exchange
        dns_1.resolveMx(emailInfo.host, (err, data) => {
            if (err) {
                errorObj.message = `${emailId} - ${err.message}`;
                err.message = JSON.stringify(errorObj);
                return resolve(err);
            }
            else {
                return resolve(data);
            }
        });
    });
}
